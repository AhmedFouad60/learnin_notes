CheckList
***********

===================================
Client Side part      [Android]
===================================


***************
Summary
***************
1-Make class to get token and send it to our server 
2-Make class to listen to token updates and send the updated one to our server
3-Make class to listen to firebase notificaion






1-create project in the console of firebase 
2-put the  [google-services.json] to the project on the android studio
3-Add the dependancies to the gradle
4-Add the library of  {firebase messaging ,cloudNotifications}
5-You can Test the token in the logcat of the android   by FirebaseInstanceId  function

    Log.e("Token is ", FirebaseInstanceId.getInstance().getToken());

6-You can send a notification to your users     ....But no one can reach it   because you didn't  Make listener Class
7-Make FCMListener to listen to the firebase and Token updates


        public class MyFCMService extends FirebaseMessagingService {

        }


8-override the  onMessageRecived() function  which will receive the message from firebase as object 



public class MyFCMService extends FirebaseMessagingService {

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        super.onMessageReceived(remoteMessage);
        sendNotification(remoteMessage.getNotification().getBody());

    }

    private void sendNotification(String messageBody) {
        Intent intent = new Intent(this, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent,
                PendingIntent.FLAG_ONE_SHOT);

        Uri defaultSoundUri= RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this)
                .setSmallIcon(R.mipmap.ic_launcher)
                .setContentTitle("FCM Message")
                .setContentText(messageBody)
                .setAutoCancel(true)
                .setSound(defaultSoundUri)
                .setContentIntent(pendingIntent);

        NotificationManager notificationManager =
                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

        notificationManager.notify(0 /* ID of notification */, notificationBuilder.build());
    }
}



9-Add this Service to the Manifest 

	 <service android:name=".MyFirebaseMessagingService">
        <intent-filter>
             <action android:name="com.google.firebase.MESSAGING_EVENT" />
         </intent-filter>
	</service>


10-you can test it with your phone and the easy send notificaion from the firebase console


--note--
The above checkList for testing firebase was working with android  ...below ..we will do part related to our Server side :)
-- --


11-Make class to get token and send it to our server 


public class FCMRegistrationService extends IntentService {

    public FCMRegistrationService(String name) {
        super(name);
    }

    @Override
    protected void onHandleIntent(Intent intent) {

    }
}

12-Now we have token in String called token ..what we will do is a)send the token to our server b)store the token in sharedPreference to use it later


13-Use Retrofit and Make method inside   [FCMRegistrationService] called  sendTokenToServer   the below with volley but i will change it to fit retrofit 


 private void sendTokenToServer(final String token) {
        String ADD_TOKEN_URL = "http://developerhendy.16mb.com/addnewtoken.php";
        StringRequest request = new StringRequest(Request.Method.POST, ADD_TOKEN_URL, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                int responseCode = Integer.parseInt(response);
                if (responseCode == 1) {
                    prefEditor.putBoolean("token_sent", true).apply();
                    Log.e("Registration Service", "Response : Send Token Success");

                } else {
                    prefEditor.putBoolean("token_sent", false).apply();
                    Log.e("Registration Service", "Response : Send Token Failed");


                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                prefEditor.putBoolean("token_sent", false).apply();
                Log.e("Registration Service", "Error :Send Token Failed");

            }
        }) {
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("token", token);
                return params;

            }
        };

        Volley.newRequestQueue(this).add(request);

    }


14-ALL The Service
	
	public class FCMRegistrationService extends IntentService {
    SharedPreferences preferences;

    public FCMRegistrationService() {
        super("FCM");
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        String token = FirebaseInstanceId.getInstance().getToken();
        preferences = PreferenceManager.getDefaultSharedPreferences(this);
        if (!preferences.getBoolean("token_sent", false))
            sendTokenToServer(token);

    }

    private void sendTokenToServer(final String token) {
        String ADD_TOKEN_URL = "http://developerhendy.16mb.com/addnewtoken.php";
        StringRequest request = new StringRequest(Request.Method.POST, ADD_TOKEN_URL, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                int responseCode = Integer.parseInt(response);
                if (responseCode == 1) {
                    preferences.edit().putBoolean("token_sent", true).apply();
                    Log.e("Registration Service", "Response : Send Token Success");

                } else {
                    preferences.edit().putBoolean("token_sent", false).apply();
                    Log.e("Registration Service", "Response : Send Token Failed");


                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                preferences.edit().putBoolean("token_sent", false).apply();
                Log.e("Registration Service", "Error :Send Token Failed");

            }
        }) {
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("token", token);
                return params;

            }
        };

        Volley.newRequestQueue(this).add(request);

    }

}


15-Until now we have finished the class that get the token and send it to our server to register it in the DB

16-Create the class that listen to refreshed tokens 


public class FCMTokenRefreshListenerService extends FirebaseInstanceIdService {
    @Override
    public void onTokenRefresh() {

        Intent intent = new Intent(this, FCMRegistrationService.class);
        intent.putExtra("refreshed", true);
        startService(intent);
    }
}

17-Update  the class  FCMRegistrationService to make it receve the intent from  FCMTokenRefreshListenerService



import android.app.IntentService;
import android.content.Intent;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.firebase.iid.FirebaseInstanceId;

import java.util.HashMap;
import java.util.Map;

public class FCMRegistrationService extends IntentService {
    SharedPreferences preferences;

    public FCMRegistrationService() {
        super("FCM");
    }

    @Override
    protected void onHandleIntent(Intent intent) {
        // get Default Shard Preferences   
        preferences = PreferenceManager.getDefaultSharedPreferences(this);
        
        // get token from Firebase 
        String token = FirebaseInstanceId.getInstance().getToken();

        // check if intent is null or not if it isn't null we will ger refreshed value and 
        // if its true we will override token_sent value to false and apply 
        if (intent.getExtras() != null) {
            boolean refreshed = intent.getExtras().getBoolean("refreshed");
            if (refreshed) preferences.edit().putBoolean("token_sent", false).apply();
        }
        
        // if token_sent value is false then use method sendTokenToServer to send token to server 
        if (!preferences.getBoolean("token_sent", false))
            sendTokenToServer(token);

    }
    
    
    // method use volley to send token to server and stop the service when done or error happened 
    private void sendTokenToServer(final String token) {
        String ADD_TOKEN_URL = "http://developerhendy.16mb.com/addnewtoken.php";
        StringRequest request = new StringRequest(Request.Method.POST, ADD_TOKEN_URL, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                int responseCode = Integer.parseInt(response);
                if (responseCode == 1) {
                    preferences.edit().putBoolean("token_sent", true).apply();
                    Log.e("Registration Service", "Response : Send Token Success");
                    stopSelf();

                } else {
                    preferences.edit().putBoolean("token_sent", false).apply();
                    Log.e("Registration Service", "Response : Send Token Failed");
                    stopSelf();


                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                preferences.edit().putBoolean("token_sent", false).apply();
                Log.e("Registration Service", "Error :Send Token Failed");
                stopSelf();

            }
        }) {
            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("token", token);
                return params;

            }
        };

        Volley.newRequestQueue(this).add(request);

    }

}




18-update the Manifest to look like this 

	<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.hendiware.hellofirebase">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!--###  listener service listen to firebase messages ###-->
        <service
            android:name=".MyFCMService"
            android:exported="false">
            <intent-filter>
                <action android:name="com.google.firebase.MESSAGING_EVENT" />
            </intent-filter>
        </service>

        <!--###  Register service get token and send it to service  ###-->
        <service android:name=".FCMRegistrationService" />

        <!--###  Service response to token refresh event  ###-->
        <service
            android:name=".FCMTokenRefreshListenerService"
            android:exported="false">
            <intent-filter>
                <action android:name="com.google.firebase.INSTANCE_ID_EVENT" />
            </intent-filter>
        </service>
    </application>

</manifest>


19-Update MyFCMService to fit what we want in the server



public class MyFCMService extends FirebaseMessagingService {

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        super.onMessageReceived(remoteMessage);
        
        String title = remoteMessage.getData().get("title");
        String message = remoteMessage.getData().get("message");
 
        sendNotification(remoteMessage.getData().get("title"), remoteMessage.getData().get("message"));

    }

    private void sendNotification(String title, String messageBody) {
        Intent intent = new Intent(this, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent,
                PendingIntent.FLAG_ONE_SHOT);

        Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
        NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this)
                .setSmallIcon(R.mipmap.ic_launcher)
                .setContentTitle(title)
                .setContentText(messageBody)
                .setAutoCancel(true)
                .setSound(defaultSoundUri)
                .setContentIntent(pendingIntent);

        NotificationManager notificationManager =
                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

        notificationManager.notify(0 /* ID of notification */, notificationBuilder.build());
    }
}

20-











----------------------------------------------------------------------------------------------------------------------------


===================================
Server  Side part      [PHP]
===================================


1-Make class to connect to the android and receve tokens from  android  to store it in our server so we can send notificaion to this person later
2-Make class to send notificaion if some event occurred or the user connect to this class
3-Go and Create table e.i (users_token) have attributes {id int,tokens string}
4-Make API for the step 3 just like that 

<?php

	/***** Some logic Here *****/

	$result = $db->insert('users_tokens',['tokens'=> $_POST['token'] ]);
	if($result)
	    echo 1;
	else
	    echo 0;
 ?>



5-send http request to firebase  with attaching {apikey,message,token of the user you want to sent the message to }

The Code Like That :=>

<?php
include 'DB.php';
$db = DB::getInstance();
$tokens = $db->table('users_tokens')->select('tokens')->get();

$tokens_arr = [];
foreach ($tokens as $key => $token) {
    array_push($tokens_arr, $token['tokens']);
}

    //************   rplace this with your key values data or modifi it as you like ***************// 
 $data = array('title' => 'Hendiware!','message' => 'are you ready to learn something new today ?');

 sendMessageThroughFCM($tokens_arr, $data);
 

function sendMessageThroughFCM($registatoin_ids, $data)
{
    $url = 'https://fcm.googleapis.com/fcm/send';
    $fields = array(
        'registration_ids' =>   $registatoin_ids   ,
        'data' => $data,
    );
    //************   rplace this with your api key ***************// 
    define("GOOGLE_API_KEY", "AIzaSyDnMUM8SWm0MhV1a4NaWsptue8HVZcf4Zk");
    $headers = array(
        'Authorization: key=' . GOOGLE_API_KEY,
        'Content-Type: application/json'
    );
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
    $result = curl_exec($ch);
    if ($result === FALSE) {
        die('Curl failed: ' . curl_error($ch));
    }
    curl_close($ch);
    echo $result;

 }




 
































